name: ODBC Driver for Linux

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REPOSITORY_ROOT: "${{github.workspace}}"
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "${{github.workspace}}/build/odbc/lib"
  ODBC_BIN_PATH: "${{github.workspace}}/build/odbc/bin"
  ODBC_BUILD_PATH: "${{github.workspace}}/build/odbc/build"
  VCPKG_ROOT: "${{github.workspace}}/vcpkg"
  TIMESTREAM_LOG_PATH: "${{github.workspace}}/build/odbc/logs"
  TIMESTREAM_LOG_LEVEL: "debug"
  JAVA_HOME: "/usr/lib/jvm/java-17-amazon-corretto/"

jobs:
  build-linux64:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
    steps:
    - uses: actions/checkout@v2
    - name: Get Java distribution
      run: | 
        sudo apt-get -y install software-properties-common
        wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -
        sudo apt-add-repository 'deb https://apt.corretto.aws stable main'
        sudo apt-get update
        sudo apt-get install -y java-17-amazon-corretto-jdk
        
    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest

    - name: run-cppcheck
      run: |
        sudo apt install cppcheck
        sh run_cppcheck.sh
  
    - name: upload-cppcheck-results
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: cppcheck-results
        path: cppcheck-results.log

    - name: get-dependencies
      if: success()
      run: |
        sudo apt update
        sudo apt install libcurl4-openssl-dev libssl-dev uuid-dev zlib1g-dev libpulse-dev linux-headers-$(uname -r) gcc gcc-multilib  g++ g++-multilib linux-headers-$(uname -r) build-essential valgrind libboost-all-dev libsasl2-dev lcov
   
    - name: get-vcpkg-dependencies
      run: |
        git clone https://github.com/microsoft/vcpkg
        ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
        ./vcpkg/vcpkg install "aws-sdk-cpp[core,sts,timestream-query]" --recurse

    # TODO enable clang-tidy-check
    # https://bitquill.atlassian.net/browse/AD-726
    
    # generate compile_commands.json file for clang-tidy-check, requires boost dependencies
    # - name: generate-compile-commands-file
    #   run: |
    #    cmake "${{github.workspace}}/src" -DCMAKE_EXPORT_COMPILE_COMMANDS=on -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE="OFF" -DBUILD_SHARED_LIBS="OFF" -DWITH_TESTS="ON" -DWITH_ODBC="ON"
 
    # - name: clang-tidy-check
    #  uses: ZedThree/clang-tidy-review@v0.8.3
    #  id: review
      # with:         
        # If there are any comments, fail the check
    # - if: steps.review.outputs.total_comments > 0
    #   run: exit 1        

    - name: configure-and-build-driver
      run: |
        ./build_linux_release64_deb.sh

    - name: register-odbc-driver
      run: |
        chmod +r -R ${{env.ODBC_LIB_PATH}}
        chmod +x scripts/register_driver_unix.sh
        sudo bash scripts/register_driver_unix.sh

    # run unit tests
    - name: run-unit-tests
      id: rununittests
      run: |
        mkdir -p "${{env.TIMESTREAM_LOG_PATH}}"
        ./build/odbc/bin/timestream-odbc-unit-tests --catch_system_errors=false

    - name: upload-unit-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Ubuntu 20.04 Build Unit Test Results Check"
        comment_title: "Ubuntu 20.04 Build Unit Test Results"
        files: ./odbc_unit_test_result.xml

    - name: upload-odbc-unit-test-file
      if: always() && (steps.rununittests.outcome == 'failure')
      uses: actions/upload-artifact@v2
      with:
        name: odbc-unit-test-results
        path: |
          ./odbc_unit_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log 
          ./aws_sdk_*.log

    # run odbc tests
    - name: run-odbc-tests
      id: runodbctests
      run: |
        ./build/odbc/bin/timestream-odbc-integration-tests --catch_system_errors=false

    - name: upload-odbc-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Ubuntu 20.04 Build Integration Test Results Check"
        comment_title: "Ubuntu 20.04 Build Integration Test Results"
        files: ./odbc_test_result.xml

    - name: upload-odbc-test-file
      if: always() && (steps.runodbctests.outcome == 'failure')
      uses: actions/upload-artifact@v2
      with:
        name: odbc-test-results
        path: |
          ./odbc_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log 
          ./aws_sdk_*.log

  build-linux64-debug:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Get Java distribution
      run: | 
        sudo apt-get -y install software-properties-common
        wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -
        sudo apt-add-repository 'deb https://apt.corretto.aws stable main'
        sudo apt-get update
        sudo apt-get install -y java-17-amazon-corretto-jdk
        pip install gcovr

    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest

    - name: run-cppcheck
      run: |
        sudo apt install cppcheck
        sh run_cppcheck.sh
  
    - name: upload-cppcheck-results
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: cppcheck-results
        path: cppcheck-results.log

    - name: get-dependencies
      if: success()
      run: |
        sudo apt update
        sudo apt install libcurl4-openssl-dev libssl-dev uuid-dev zlib1g-dev libpulse-dev linux-headers-$(uname -r) gcc gcc-multilib  g++ g++-multilib linux-headers-$(uname -r) build-essential valgrind libboost-all-dev libsasl2-dev lcov

    - name: get-vcpkg-dependencies
      run: |
        git clone https://github.com/microsoft/vcpkg
        ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
        ./vcpkg/vcpkg install "aws-sdk-cpp[core,sts,timestream-query]" --recurse

    # TODO enable clang-tidy-check
    # https://bitquill.atlassian.net/browse/AD-726
    
    # generate compile_commands.json file for clang-tidy-check, requires boost dependencies
    # - name: generate-compile-commands-file
    #   run: |
    #    cmake "${{github.workspace}}/src" -DCMAKE_EXPORT_COMPILE_COMMANDS=on -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE="OFF" -DBUILD_SHARED_LIBS="OFF" -DWITH_TESTS="ON" -DWITH_CORE="OFF" -DWITH_ODBC="ON"
 
    # - name: clang-tidy-check
    #  uses: ZedThree/clang-tidy-review@v0.8.3
    #  id: review
      # with:         
        # If there are any comments, fail the check
    # - if: steps.review.outputs.total_comments > 0
    #   run: exit 1        

    - name: configure-and-build-driver
      run: |
        ./build_linux_debug64.sh

    - name: register-odbc-driver
      run: |
        chmod +r -R ${{env.ODBC_LIB_PATH}}
        chmod +x scripts/register_driver_unix.sh
        sudo bash scripts/register_driver_unix.sh

    # run unit tests
    - name: run-unit-tests
      id: rununittests
      run: |
        mkdir -p "${{env.TIMESTREAM_LOG_PATH}}"
        ./build/odbc/bin/timestream-odbc-unit-tests --catch_system_errors=false
  
    - name: upload-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Ubuntu 20.04 Debug Build Unit Test Results Check"
        comment_title: "Ubuntu 20.04 Debug Build Unit Test Results"
        files: ./odbc_unit_test_result.xml

    - name: upload-unit-test-file
      if: always() && (steps.rununittests.outcome == 'failure')
      uses: actions/upload-artifact@v3
      with:
        name: odbc-unit-test-results-linux-debug
        path: |
          ./odbc_unit_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log 
          ./aws_sdk_*.log

    # run odbc tests
    - name: run-odbc-tests
      id: runodbctests
      run: |
        ./build/odbc/bin/timestream-odbc-integration-tests --catch_system_errors=false
        gcovr --exclude-directories=cmake-build64/tests/integration-test/CMakeFiles/timestream-odbc-integration-tests.dir$ --exclude-directories=cmake-build64/tests/unit-test/CMakeFiles/timestream-odbc-unit-tests.dir$ -e "${{env.VCPKG_ROOT}}" --cobertura --output coverage.cobertura.xml

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.2.0
      with:
        filename: coverage.cobertura.xml
        badge: true
        format: markdown
        indicators: true
        output: both

    - name: Add Header for Code Coverage Summary Report
      run: |
        echo "## Ubuntu 20.04 Debug Build Test Results Check" > coverage-cobertura.md
        cat code-coverage-results.md >> coverage-cobertura.md
    
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        header: linux
        recreate: true
        path: coverage-cobertura.md
  
    - name: upload-odbc-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Ubuntu 20.04 Debug Build Integration Test Results Check"
        comment_title: "Ubuntu 20.04 Debug Build Integration Test Results"
        files: ./odbc_test_result.xml

    - name: upload-odbc-test-file
      if: always() && (steps.runodbctests.outcome == 'failure')
      uses: actions/upload-artifact@v3
      with:
        name: odbc-test-results-linux-debug
        path: |
          ./odbc_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log 
          ./aws_sdk_*.log   

    - name: upload-coverage
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-Linux
        path: cmake-build64/ccov/all-merged

  build-linux-docker-image:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: build-image
      run: |
        cd docker/linux-environment
        docker build -t timestream-dev-linux . 


# TODO Linux build enhacements 
#https://bitquill.atlassian.net/browse/AD-688
