name: ODBC Driver for Mac

on:
  schedule:
    - cron: '0 8 * * 1,2,3,4,5'

  # Do Not run for each push or pull_request temporarily
  #push:
  #  branches:
  #    - main
  #    - develop
  #pull_request:
  #  branches:
  #    - main
  #    - develop

env:
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "${{github.workspace}}/build/odbc/lib"
  ODBC_BIN_PATH: "${{github.workspace}}/build/odbc/bin"
  ODBC_BUILD_PATH: "${{github.workspace}}/build/odbc/build"
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}  
  TIMESTREAM_LOG_PATH: "${{github.workspace}}/build/odbc/logs"
  TIMESTREAM_LOG_LEVEL: "4"
  ODBCINSTINI: "${{github.workspace}}/build/odbc/lib/timestream-odbc-install.ini"
  ODBCINI: "${{github.workspace}}/odbc.ini"
  AWS_SHARED_CREDENTIALS_FILE: "${{github.workspace}}/src/tests/input/credentials"

  # # AAD Test environment variables. Uncomment out to use GitHub secrets to enable AAD integration tests
  # ENABLE_AAD_TEST: "TRUE"
  # AAD_APP_ID: ${{secrets.AAD_APP_ID}}
  # AAD_ROLE_ARN: ${{secrets.AAD_ROLE_ARN}}
  # AAD_IDP_ARN: ${{secrets.AAD_IDP_ARN}}
  # AAD_TENANT: ${{secrets.AAD_TENANT}}
  # AAD_USER: ${{secrets.AAD_USER}}
  # AAD_USER_PWD: ${{secrets.AAD_USER_PWD}}
  # AAD_CLIENT_SECRET: ${{secrets.AAD_CLIENT_SECRET}}

  # # OKTA Test environment variables. Uncomment out to use GitHub secrets to enable AAD integration tests
  # ENABLE_OKTA_TEST: "TRUE"
  # OKTA_HOST: ${{secrets.OKTA_HOST}}
  # OKTA_USER: ${{secrets.OKTA_USER}}
  # OKTA_USER_PWD: ${{secrets.OKTA_USER_PWD}}
  # OKTA_APP_ID: ${{secrets.OKTA_APP_ID}}
  # OKTA_ROLE_ARN: ${{secrets.OKTA_ROLE_ARN}}
  # OKTA_IDP_ARN: ${{secrets.OKTA_IDP_ARN}}  

jobs:
  build-mac:
    runs-on: macos-11
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
    steps:
    - uses: actions/checkout@v2
    - name: run-cppcheck
      run: |
        brew install cppcheck
        sh run_cppcheck.sh
    - name: upload-cppcheck-results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: cppcheck-results
        path: cppcheck-results.log

    - name: get-dependencies
      run: |
        brew tap homebrew/services
        brew unlink unixodbc
        brew install libiodbc
        brew install cmake
        brew install openssl
        brew install boost

    - name: create-credentials-files
      run: |
        echo "[test-profile]" > ${{github.workspace}}/src/tests/input/credentials
        echo "aws_access_key_id = ${{env.AWS_ACCESS_KEY_ID}}" >> ${{github.workspace}}/src/tests/input/credentials
        echo "aws_secret_access_key = ${{env.AWS_SECRET_ACCESS_KEY}}" >> ${{github.workspace}}}/src/tests/input/credentials

        echo "[incomplete-profile]" >> ${{github.workspace}}/src/tests/input/credentials
        echo "aws_access_key_id = ${{env.AWS_ACCESS_KEY_ID}}" >> ${{github.workspace}}/src/tests/input/credentials

    - name: configure-and-build-driver
      run: |
        ./build_mac_release64.sh
      env:
        OPENSSL_ROOT_DIR: /usr/local/opt/openssl

    - name: update-environment-with-ODBC_DRIVER_VERSION
      run: |
        read -r ODBC_DRIVER_VERSION < ./src/ODBC_DRIVER_VERSION.txt
        echo "ODBC_DRIVER_VERSION=$ODBC_DRIVER_VERSION" >> $GITHUB_ENV

    - name: upload-package
      uses: actions/upload-artifact@v3
      with:
        name: AmazonTimestreamODBC-${{env.ODBC_DRIVER_VERSION}}.pkg
        path: ./cmake-build64/AmazonTimestreamODBC-${{env.ODBC_DRIVER_VERSION}}.pkg

    # - name: prepare-dsn
    #   run: |
    #     sudo mkdir /Library/ODBC
    #     sudo cp ./src/Tests/Tests/odbc-mac.ini /Library/ODBC/odbc.ini
    #     sudo cp ./src/Tests/Tests/odbcinst-mac.ini /Library/ODBC/odbcinst.ini
    #     mkdir ${{ github.workspace }}/odbc-logs
    - name: register-odbc-driver
      run: |
        chmod +x scripts/register_driver_unix.sh
        ./scripts/register_driver_unix.sh

    - name: run-unit-tests
      id: rununittests
      run: |
        mkdir -p "${{env.TIMESTREAM_LOG_PATH}}"
        export DYLD_LIBRARY_PATH=${{env.ODBC_LIB_PATH}}:$DYLD_LIBRARY_PATH     
        ./build/odbc/bin/timestream-odbc-unit-tests --catch_system_errors=false

    - name: upload-unit-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "MacOS Big Sur 11 Build Unit Test Results Check"
        comment_title: "MacOS Big Sur 11 Build Unit Test Results"
        files: ./odbc_unit_test_result.xml

    - name: upload-unit-test-file
      if: always() && (steps.rununittests.outcome == 'failure')
      uses: actions/upload-artifact@v3
      with:
        name: odbc-unit-test-results
        path: |
          ./odbc_unit_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log

    - name: run-integration-tests
      id: runintegrationtests
      run: |
        export DYLD_LIBRARY_PATH=${{env.ODBC_LIB_PATH}}:$DYLD_LIBRARY_PATH     
        ./build/odbc/bin/timestream-odbc-integration-tests --catch_system_errors=false

    - name: upload-integration-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "MacOS Big Sur 11 Build Integration Test Results Check"
        comment_title: "MacOS Big Sur 11 Build Integration Test Results"
        files: ./odbc_test_result.xml

    - name: upload-integration-test-file
      if: always() && (steps.runintegrationtests.outcome == 'failure')
      uses: actions/upload-artifact@v3
      with:
        name: odbc-integration-test-results
        path: |
          ./odbc_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log

    # - name: print-memory-leak-logs
    #   if: always()
    #   run: |
    #     cat ./leaks_*
    # - name: upload-test-logs
    #   if: failure()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: test-logs-mac64
    #     path: |
    #       ${{ github.workspace }}/odbc-logs/
    #       ${{ github.workspace }}/leaks_
    # - name: test
    #   run: |
    #     bash ./run_test_runner.sh
    # - name: build-installer
    #   if: success()
    #   run: |
    #     cd cmake-build64
    #     cmake ../src
    #     make
    #     cpack .
    #     cd ..
    # - name: create-output
    #   if: success()
    #   run: |
    #     mkdir build-output
    #     mkdir test-output
    #     mkdir installer
    #     cp ./build/odbc/lib/*.dylib build-output/
    #     cp ./build/odbc/lib/*.a build-output/
    #     cp ./cmake-build64/*.pkg installer/
    # - name: upload-build
    #   if: success()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: mac64-build
    #     path: build-output
    # - name: upload-installer
    #   if: success()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: mac64-installer
    #     path: installer
    # - name: upload-test-results
    #   if: success()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: mac-test-results
    #     path: test-output

