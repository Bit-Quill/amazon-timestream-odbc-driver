name: ODBC Driver for Windows

on:
  schedule:
    - cron: '0 8 * * *'

  # Do Not run for each push or pull_request temporarily
  #push:
  #  branches:
  #    - main
  #    - develop
  #pull_request:
  #  branches:
  #    - main
  #    - develop

env:
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "${{github.workspace}}/build/odbc/lib"
  ODBC_BIN_PATH: "${{github.workspace}}/build/odbc/bin/Release"
  ODBC_DEBUG_PATH: "${{github.workspace}}/build/odbc/bin/Debug"
  ODBC_BUILD_PATH: "${{github.workspace}}/build/odbc/cmake"
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  VCPKG_ROOT: "c:/vcpkg"
  TIMESTREAM_LOG_PATH: "${{github.workspace}}/build/odbc/logs"
  TIMESTREAM_LOG_LEVEL: "4"
  AWS_SHARED_CREDENTIALS_FILE: "${{github.workspace}}/src/tests/input/credentials"
  BIG_TABLE_PAGINATION_TEST_ENABLE: "TRUE"

  # # AAD Test environment variables. Uncomment out to use GitHub secrets to enable AAD integration tests
  # ENABLE_AAD_TEST: "TRUE"
  # AAD_APP_ID: ${{secrets.AAD_APP_ID}}
  # AAD_ROLE_ARN: ${{secrets.AAD_ROLE_ARN}}
  # AAD_IDP_ARN: ${{secrets.AAD_IDP_ARN}}
  # AAD_TENANT: ${{secrets.AAD_TENANT}}
  # AAD_USER: ${{secrets.AAD_USER}}
  # AAD_USER_PWD: ${{secrets.AAD_USER_PWD}}
  # AAD_CLIENT_SECRET: ${{secrets.AAD_CLIENT_SECRET}}

  # # OKTA Test environment variables. Uncomment out to use GitHub secrets to enable AAD integration tests
  # ENABLE_OKTA_TEST: "TRUE"
  # OKTA_HOST: ${{secrets.OKTA_HOST}}
  # OKTA_USER: ${{secrets.OKTA_USER}}
  # OKTA_USER_PWD: ${{secrets.OKTA_USER_PWD}}
  # OKTA_APP_ID: ${{secrets.OKTA_APP_ID}}
  # OKTA_ROLE_ARN: ${{secrets.OKTA_ROLE_ARN}}
  # OKTA_IDP_ARN: ${{secrets.OKTA_IDP_ARN}}  

jobs:
  # check if there is a change within one day
  check:
    runs-on: windows-2022
    outputs:
      status: ${{env.CheckStatus}}
    steps:
      - uses: actions/checkout@v2
      - id: early
        name: Early exit
        run: |
          $output = powershell.exe -File ${{github.workspace}}\scripts\win_check_changes.ps1
          echo $output
          if ($output -match 'continue') {
            echo "CheckStatus=continue" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "CheckStatus=skip" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

  build-windows32:
    runs-on: windows-2022

    needs: check
    if: needs.check.outputs.status == 'continue'
    steps:
    - uses: actions/checkout@v2
    # TODO Reactivate cppcheck
    # https://bitquill.atlassian.net/browse/AD-752
    # - name: setup-cppcheck
    #   id: setup_cppcheck
    #   run: |
    #     choco install cppcheck -y -d
    #     echo "C:\Program Files\Cppcheck" >> $env:GITHUB_PATH
    # - name: run-cppcheck
    #   id: run-cppcheck
    #   run: |
    #     .\run_cppcheck.ps1
    # - name: upload-cppcheck-results
    #   if: failure()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: cppcheck-results
    #     path: cppcheck-results.log 

    - name: "Update path for WIX Toolset"
      run: |
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest

    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Cache dependencies Windows 32
      id: cache-dependencies-windows-32
      uses: actions/cache@v3
      with:
        path: | 
          ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-cache-dependencies-windows-32-v1

    - name: Install dependencies Windows
      run: vcpkg integrate install; vcpkg install boost-test:x86-windows boost-asio:x86-windows boost-chrono:x86-windows boost-interprocess:x86-windows boost-regex:x86-windows boost-system:x86-windows boost-thread:x86-windows --recurse
      env:
        VCPKG_ROOT: ${{ env.VCPKG_ROOT }}

    - name: create-credentials-files
      run: |
        echo "[test-profile]" > ${{github.workspace}}/src/tests/input/credentials
        echo "aws_access_key_id = ${{env.AWS_ACCESS_KEY_ID}}" >> ${{github.workspace}}/src/tests/input/credentials
        echo "aws_secret_access_key = ${{env.AWS_SECRET_ACCESS_KEY}}" >> ${{github.workspace}}/src/tests/input/credentials

        echo "[incomplete-profile]" >> ${{github.workspace}}/src/tests/input/credentials
        echo "aws_access_key_id = ${{env.AWS_ACCESS_KEY_ID}}" >> ${{github.workspace}}/src/tests/input/credentials

    - name: configure-and-build-driver
      run: |
        .\build_win_release32.ps1

    - name: register-driver
      run: |
        .\src\odbc\install\install_amd64.cmd ${{env.ODBC_BIN_PATH}}\timestream.odbc.dll ${{env.ODBC_BIN_PATH}}\timestream.odbc.dll

    - name: run-unit-tests
      id: rununittests
      run: |
        mkdir -p "${{env.TIMESTREAM_LOG_PATH}}"
        ${{env.ODBC_BIN_PATH}}/timestream-odbc-unit-tests.exe

    - name: upload-unit-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Windows x32 Build Unit Test Results Check"
        comment_title: "Windows 2022 (x32) Build Unit Test Results"
        files: ./odbc_unit_test_result.xml

    - name: upload-unit-test-file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: odbc-unit-test-results
        path: |
          ./odbc_unit_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log

    - name: run-integration-tests
      id: runintegrationtests
      run: |
        ${{env.ODBC_BIN_PATH}}/timestream-odbc-integration-tests.exe

    - name: upload-integration-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Windows x32 Build Integration Test Results Check"
        comment_title: "Windows 2022 (x32) Build Integration Test Results"
        files: ./odbc_test_result.xml

    - name: upload-integration-test-file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: odbc-test-results
        path: |
          ./odbc_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log
    # - name: build-installer
    #   if: success()
    #   run: |
    #     .\scripts\build_installer.ps1 Release Win32 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
    # - name: prepare-output
    #   if: success()
    #   run: |
    #     .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
    # - name: upload-build
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows32-build
    #     path: ci-output/build
    # - name: upload-installer
    #   if: success()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows32-installer
    #     path: ci-output/installer
    # - name: upload-test-results
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows-test-results
    #     path: $CI_OUTPUT_PATH/test
  build-windows64:
    runs-on: windows-2022

    needs: check
    if: needs.check.outputs.status == 'continue'
    steps:
    - uses: actions/checkout@v2
    # TODO Reactivate cppcheck
    # https://bitquill.atlassian.net/browse/AD-752
    # - name: run-cppcheck
    #   id: setup_cppcheck
    #   run: |
    #     choco install cppcheck -y -d
    #     echo "C:\Program Files\Cppcheck" >> $env:GITHUB_PATH
    # - name: run-cppcheck
    #   id: run-cppcheck
    #   run: |
    #     .\run_cppcheck.ps1
    # - name: upload-cppcheck-results
    #   if: failure()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: cppcheck-results
    #     path: cppcheck-results.log

    - name: "Update path for WIX Toolset"
      run: |
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest

    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Cache dependencies Windows 64
      id: cache-dependencies-windows-64
      uses: actions/cache@v3
      with:
        path: | 
          ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-cache-dependencies-windows-64-v1
        
    - name: Install dependencies Windows
      run: vcpkg integrate install; vcpkg install boost-test:x64-windows boost-asio:x64-windows boost-chrono:x64-windows boost-interprocess:x64-windows boost-regex:x64-windows boost-system:x64-windows boost-thread:x64-windows --recurse
      env:
        VCPKG_ROOT: ${{env.VCPKG_ROOT}}

    - name: create-credentials-files
      run: |
        echo "[test-profile]" > ${{github.workspace}}/src/tests/input/credentials
        echo "aws_access_key_id = ${{env.AWS_ACCESS_KEY_ID}}" >> ${{github.workspace}}/src/tests/input/credentials
        echo "aws_secret_access_key = ${{env.AWS_SECRET_ACCESS_KEY}}" >> ${{github.workspace}}/src/tests/input/credentials

        echo "[incomplete-profile]" >> ${{github.workspace}}/src/tests/input/credentials
        echo "aws_access_key_id = ${{env.AWS_ACCESS_KEY_ID}}" >> ${{github.workspace}}/src/tests/input/credentials

    - name: configure-and-build-driver
      run: |
        .\build_win_release64.ps1

    - name: Upload ODBC driver build at push to develop
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
      uses: actions/upload-artifact@v3
      with:
        name: timestream-odbc-driver
        path: build/odbc/cmake/Release

    - name: Upload performance test at push to develop
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
      uses: actions/upload-artifact@v3
      with:
        name: performance
        path: build/odbc/bin/Release/performance.exe

    - name: register-driver
      run: |
        .\src\odbc\install\install_amd64.cmd ${{env.ODBC_BIN_PATH}}\timestream.odbc.dll

    - name: run-unit-tests
      id: rununittests
      run: |
        mkdir -p "${{env.TIMESTREAM_LOG_PATH}}"
        ${{env.ODBC_BIN_PATH}}/timestream-odbc-unit-tests.exe

    - name: upload-unit-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Windows 2022 (x64) Build Unit Test Results Check"
        comment_title: "Windows 2022 (x64) Build Unit Test Results"
        files: ./odbc_unit_test_result.xml

    - name: upload-unit-test-file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: odbc-unit-test-results
        path: |
          ./odbc_unit_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log

    - name: run-integration-tests
      id: runintegrationtests
      run: |
        ${{env.ODBC_BIN_PATH}}/timestream-odbc-integration-tests.exe

    - name: upload-integration-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Windows 2022 (x64) Build Integration Test Results Check"
        comment_title: "Windows 2022 (x64) Build Integration Test Results"
        files: ./odbc_test_result.xml

    - name: upload-integration-test-file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: odbc-test-results
        path: |
          ./odbc_test_result.xml
          ./build/odbc/logs/timestream_odbc_*.log
  #   - name: build-installer
  #     if: success()
  #     run: |
  #       .\scripts\build_installer.ps1 Release x64 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
  #   - name: prepare-output
  #     if: success()
  #     run: |
  #       .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
  #   - name: upload-build
  #     if: always()
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: windows64-build
  #       path: ci-output/build
  #   - name: upload-installer
  #     if: success()
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: windows64-installer
  #       path: ci-output/installer
  build-windows64_coverage:
    runs-on: windows-2022

    needs: check
    if: needs.check.outputs.status == 'continue'
    steps:
    - uses: actions/checkout@v2

    - name: "Update path for WIX Toolset"
      run: |
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest

    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: setup-opencppcoverage-and-add-to-path
      id: setup_opencppcoverage
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

    - name: Cache dependencies Windows 64
      id: cache-dependencies-windows-64
      uses: actions/cache@v3
      with:
        path: | 
          ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-cache-dependencies-windows-64-v1
  
    - name: Install dependencies Windows
      run: vcpkg integrate install; vcpkg install boost-test:x64-windows boost-asio:x64-windows boost-chrono:x64-windows boost-interprocess:x64-windows boost-regex:x64-windows boost-system:x64-windows boost-thread:x64-windows --recurse
      env:
        VCPKG_ROOT: ${{env.VCPKG_ROOT}}

    - name: create-credentials-files
      run: |
        echo "[test-profile]" > ${{github.workspace}}/src/tests/input/credentials
        echo "aws_access_key_id = ${{env.AWS_ACCESS_KEY_ID}}" >> ${{github.workspace}}/src/tests/input/credentials
        echo "aws_secret_access_key = ${{env.AWS_SECRET_ACCESS_KEY}}" >> ${{github.workspace}}/src/tests/input/credentials

        echo "[incomplete-profile]" >> ${{github.workspace}}/src/tests/input/credentials
        echo "aws_access_key_id = ${{env.AWS_ACCESS_KEY_ID}}" >> ${{github.workspace}}/src/tests/input/credentials      

    - name: configure-and-build-driver
      run: |
        .\build_win_debug64.ps1

    - name: register-driver
      run: |
        .\src\odbc\install\install_amd64.cmd ${{env.ODBC_DEBUG_PATH}}\timestream.odbc.dll

    - name: run-tests
      run: |
        # run code coverage against unit test first
        opencppcoverage --sources src\odbc\src --sources src\odbc\include --export_type binary:unit.test.cov --excluded_modules boost_unit_test_framework --excluded_modules timestream-odbc-integration-tests --excluded_modules zlib --excluded_modules aws --excluded_modules boost --excluded_sources src\odbc\src\binary --excluded_sources src\odbc\src\common --excluded_sources src\odbc\src\impl --excluded_sources src\odbc\src\sql --excluded_sources src\odbc\src\streaming --excluded_sources src\odbc\include\ignite\odbc\binary --excluded_sources src\odbc\include\ignite\odbc\common --excluded_sources src\odbc\include\ignite\odbc\impl --excluded_sources src\odbc\include\ignite\odbc\sql --excluded_sources src\odbc\include\ignite\odbc\streaming -- ${{env.ODBC_DEBUG_PATH}}/timestream-odbc-unit-tests.exe
        # run code coverage against integration test and merge the result with the unit test one
        opencppcoverage --sources src\odbc\src --sources src\odbc\include --input_coverage unit.test.cov --export_type cobertura:coverage.cobertura.xml --excluded_modules boost_unit_test_framework --excluded_modules timestream-odbc-integration-tests --excluded_modules zlib --excluded_modules aws --excluded_modules boost --excluded_sources src\odbc\src\binary --excluded_sources src\odbc\src\common --excluded_sources src\odbc\src\impl --excluded_sources src\odbc\src\sql --excluded_sources src\odbc\src\streaming --excluded_sources src\odbc\include\ignite\odbc\binary --excluded_sources src\odbc\include\ignite\odbc\common --excluded_sources src\odbc\include\ignite\odbc\impl --excluded_sources src\odbc\include\ignite\odbc\sql --excluded_sources src\odbc\include\ignite\odbc\streaming -- ${{env.ODBC_DEBUG_PATH}}/timestream-odbc-integration-tests.exe

    - name: upload-coverage
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage
        path: coverage.cobertura.xml


  comment_PR_coverage:
    runs-on: ubuntu-latest
    needs: build-windows64_coverage
    steps:
    - uses: actions/checkout@v2

    - name: Retrieve coverage
      uses: actions/download-artifact@v2
      with:
        name: code-coverage

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.2.0
      with:
        filename: coverage.cobertura.xml
        badge: true
        format: markdown
        indicators: true
        output: both

    - name: Add Header for Code Coverage Summary Report
      run: |
        echo "## Windows 2022 (x64) Debug Build Code Coverage Test Results Check" > coverage-cobertura.md
        cat code-coverage-results.md >> coverage-cobertura.md
    
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        header: windows
        recreate: true
        path: coverage-cobertura.md

    # - name: upload-coverage
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: code-coverage
    #     path: coverage

    # 
    # The step below should be uncommented after the codecov is setup
    # - name: Upload Report to Codecov
    #   if: always()
    #   uses: codecov/codecov-action@v2.0.2
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     files: ./coverage.xml
    #     fail_ci_if_error: true
